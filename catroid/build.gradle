import java.util.regex.Pattern

buildscript {
    dependencies {
        classpath 'com.android.tools.build:gradle:0.9.+'
    }
}

apply plugin: 'android'
//apply plugin: 'findbugs'
apply plugin: 'checkstyle'
//apply plugin: 'pmd'

ext.catroid_version = "0.9"
ext.features_enabled = [
        "backpack": false
]

configurations {
    compile.exclude group: 'xpp3' //compile problem with xstream
}

dependencies {
    compile 'com.actionbarsherlock:actionbarsherlock:4.4.0@aar'
    compile 'com.android.support:support-v4:19.0.+'
//    compile fileTree(dir: 'catroid/libs', include: '*.jar')
    compile files('libs/gdx.jar')
    compile files('libs/gdx-backend-android.jar')
    compile 'com.github.kevinsawicki:http-request:5.5'
    compile 'com.squareup.okhttp:okhttp:1.3.0'
    compile 'com.thoughtworks.xstream:xstream:1.4.4'

    compile fileTree(dir: 'libs-natives', include: '*.jar')

//    instrumentTestCompile fileTree(dir: 'catroidTest/libs', include: '*.jar')
    androidTestCompile 'junit:junit:4.8.2'
    androidTestCompile 'com.jayway.android.robotium:robotium-solo:4.3.1'
    androidTestCompile files('libs/the-missing-android-xml-junit-test-runner-release-1.3_2.jar')

}


def getVersionCode = { ->
    def code = project.hasProperty('versionCode') ? versionCode.toInteger() : -1
    return code
}

def getVersionName = { ->
    def code = getVersionCode
    def versionName = "$ext.catroid_version.$code"
    println "VersionCode is set to $code"
    println "VersionName is set to $versionName"
    return versionName
}

def gitDescribe() {
    return 'git describe --tags'.execute().text.trim()
}


android {
    compileSdkVersion 19
    buildToolsVersion "19.0.3"

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 19
        packageName "org.catrobat.catroid"
        testPackageName "org.catrobat.catroid.test"
        testInstrumentationRunner "pl.polidea.instrumentation.PolideaInstrumentationTestRunner"
        versionCode getVersionCode()
        versionName getVersionName()
        buildConfigField "String", "GIT_DESCRIBE", "\"${gitDescribe()}\""
    }

    sourceSets {
        androidTest {
            if(file('testexclusions.txt').exists()){
                java.exclude file('testexclusions.txt').readLines()
                println "found testexclusions.txt"
            }
            if(file('../testexclusions.txt').exists()){
                java.exclude file('../testexclusions.txt').readLines()
                println "found ../testexclusions.txt"
            }
        }
    }

    lintOptions {
        lintConfig file('lint.xml')
        textReport true
    }

}

// Doesn't work atm. Maybe if the pmd plugin gets updated.
//task findbugs(type: FindBugs) {
//    classes = fileTree('build/classes/debug/')
//    source = fileTree(android.sourceSets.main.java.srcDirs)
//    classpath = files( project.configurations.compile.asPath )
//    effort = 'max'
//    reports.xml.enabled = false
//    reports.html.enabled = true
//}

task checkstyle(type: Checkstyle) {
    configFile file('catroid/checkstyle.xml')
    source '.'
    include '**/*.java'
    exclude 'build/**', 'libraryProjects/**'

    classpath = files(project.configurations.compile.asPath)
}

// Doesn't work atm. Maybe if the pmd plugin gets updated.
//task pmd(type: Pmd) {
//    ruleSets = ["basic", "braces", "strings"]
//    source = fileTree(android.sourceSets.main.java.srcDirs)
//}

task jenkins() << {
//    android.buildTypes.each { type ->
//        if (type.name == "debug") {
//            type.packageNameSuffix = ".jenkinsdebug"
//            type.versionNameSuffix = "-jenkins-$type.name"
//        }
//    }
}

task featuresToBuildconfig() {
    for (feature in project.ext.features_enabled) {
        def name = feature.key
        def value = feature.value
        if (project.hasProperty("allFeatures_enabled"))
            value = project["allFeatures_enabled"]
        if (project.hasProperty("${name}_enabled"))
            value = project["${name}_enabled"]

        android.defaultConfig.buildConfigField "boolean", "FEATURE_${name.toUpperCase()}_ENABLED", "${value}"
    }
}

preBuild.dependsOn featuresToBuildconfig

task testManifestHack() << {
    def origManifest = file('src/androidTest/MockActivites.xml')
    def generatedManifest = file("build/manifests/test/debug/AndroidManifest.xml")
    def origContent = origManifest.getText()
    def generatedContent = generatedManifest.getText()
    def pattern = Pattern.compile("<application.*?>.*?</application>", Pattern.DOTALL)
    def matcher = pattern.matcher(origContent)
    matcher.find()
    origContent = matcher.group()
    generatedContent = pattern.matcher(generatedContent).replaceAll(origContent)
    generatedManifest.write(generatedContent)
}

gradle.projectsEvaluated {
    generateDebugTestBuildConfig.dependsOn testManifestHack
}

def signing_config_file = file(System.getProperty("user.home") + "/.catrobat/catroid_signing_config.gradle")
if (signing_config_file.exists()) {
    apply from: signing_config_file.absolutePath
}

